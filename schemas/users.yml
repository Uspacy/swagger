openapi: '3.0.2'
info:
  title: Users
  version: '1.0'
servers:
  - url: 'https://api.example.com/v1'
tags:
  - name: usersService
  - name: authService

paths:
  /users/:
    get:
      description: Get users list
      tags: 
        - usersService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /users/{userId}/:
    parameters:
      - in: path
        name: userId
        schema:
          type: number
        required: true
        description: user id
    get:
      tags: 
        - usersService
      description: Get user by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update user data by id
      tags: 
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /users/{userId}/deactivate/:
    description: Deactivate a user by id
    post:
      tags: 
        - usersService
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /users/{userId}/activate/:
    description: Ativate a user by id
    post:
      tags: 
        - usersService
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /users/{userId}/updateRoles/:
    description: Update user roles by id
    patch:
      tags: 
        - usersService
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/UpdateRolesDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /users/{userId}/changePassword/:
    description: Update user roles by id
    patch:
      tags: 
        - usersService
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /auth/invite/:
    description: Sign up user firstName, lastName, email, password
    post:
      tags: 
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SignUpDto'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /auth/signIn/:
    description: Sign in user by email, password
    post:
      tags: 
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Token'
  /auth/confirmEmail/:
    description: Sign in user by email, password
    post:
      tags: 
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ConfirmEmailDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Token'
  /auth/refreshToken/:
    description: Sign in user by email, password
    post:
      tags: 
        - authService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Token'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        position:
          type: string
        phone:
          type: string
        active: 
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Roles'
        departmentId:
          type: string
        socialMedia:
          type: array
          items:
            $ref: '#/components/schemas/SocialMedia'
      example:
        id: "123123123"
        email: rar.stas@gmail.com
        firstName: Stas
        lastName: Raranetskyi
        phone: "+3801234567"
        position: CTO
        active: true
        departmentId: "1111"
        roles: 
          - OWNER
          - ADMIN
        socialMedia: 
          - name: facebook
            link: https://facebook.com
    UpdateUserDto:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        socialMedia:
          type: array
          items:
            $ref: '#/components/schemas/SocialMedia'
      example:
        email: rar.stas@gmail.com
        firstName: Stas
        lastName: Raranetskyi
        phone: "+3801234567"
        socialMedia: 
          - name: facebook
            link: https://facebook.com
    UpdateRolesDto:
      type: array
      items:
        $ref: '#/components/schemas/Roles'
    Roles:
      type: string
      enum:
        - USER
        - ADMIN
        - OWNER
      example:
       OWNER, ADMIN, USER
    SocialMedia:
      type: object
      properties:
        name: 
          type: string
        link:
          type: string
      example: 
        - name: facebook
          link: https://facebook.com
        - name: instagram
          link: https://www.instagram.com
    Token:
      type: object
      properties:
        expireInSeconds: 
          type: number
        jwt:
          type: string
        refreshToken:
          type: string
      example:
        expireInSeconds: 720
        jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiU3RhcyIsImxhc3ROYW1lIjoiUmFyYW5ldHNreWkiLCJlbWFpbCI6InJhci5zdGFzQGdtYWlsLmNvbSIsImlhdCI6MTUxNjIzOTAyMn0.apkhtIU-xGQoeEccXh7aOhJP-GhWjg21V0nRCw-hO4g
        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiU3RhcyIsImxhc3ROYW1lIjoiUmFyYW5ldHNreWkiLCJlbWFpbCI6InJhci5zdGFzQGdtYWlsLmNvbSIsImlhdCI6MTUxNjIzOTAyMn0.apkhtIU-xGQoeEccXh7aOhJP-GhWjg21V0nRCw-hO4g
    SignUpDto:
      type: object
      properties:
        email: 
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
      example: 
        email: rar.stas@gmail.com
        password: "12345678"
        firstName: Stas
        lastName: Raranetskyi
    JWT:
      type: object
      properties:
        id:
          type: string
        email: 
          type: string
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Roles'
      example: 
        email: rar.stas@gmail.com
        id: "123123123"
        firstName: Stas
        lastName: Raranetskyi
        roles: 
          - OWNER
          - ADMIN
    SignInDto:
      type: object
      properties:
        email: 
          type: string
        password:
          type: string
      example: 
        email: rar.stas@gmail.com
        password: "12345678"
    ConfirmEmailDto:
      type: object
      properties:
        email: 
          type: string
        token:
          type: string
      example: 
        email: rar.stas@gmail.com
        token: r6pvb5pllte
    ChangePasswordDto:
      type: object
      properties:
        password: 
          type: string
      example: 
        password: "12345678"
    
