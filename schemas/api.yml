openapi: '3.0.1'
info:
  title: Uspacy api
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000
tags:
  - name: usersService
  - name: authService
  - name: departmentsService
  - name: rolesService
  - name: newsFeedService
  - name: tasksService
  - name: filesService
  - name: commentsService

paths:
  # users begin
  /company/v1/users/:
    get:
      description: Get users list. Available only for authorized users.
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
        # - $ref: '#/components/parameters/queryUsers'
        - $ref: '#/components/parameters/filterUsers'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Sign up user by firstName, lastName, email, password. Available only for users with admin permissions. Returns created user
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpDto'
      responses:
        '201':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      position:
                        example: ''
                      phone:
                        example: "[]"
                      birthday:
                        example: 0
                      roles:
                        example: '["Employee"]'
                      departmentsIds:
                        example: "[]"
                      socialMedia:
                        example: "[]"

          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - usersService
      description: Get user by id. Available only for authorized users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update user data by id. Available only for authorized users
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/deactivate/:
    post:
      description: "Deactivate user by id. Available only for users with admin permissions. Returns user data with active: false"
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      active:
                        example: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/activate/:
    post:
      description: "Activate user by id. Available only for users with admin permissions. Returns user data with active: true"
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/updateRoles/:
    patch:
      description: Update user roles by id. Available only for users with admin permissions. Returns user data with new roles
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRolesDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/updatePosition/:
    patch:
      description: Update user position by id. Available only for users with admin permissions. Returns user data with new position
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPosition'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/changePassword/:
    patch:
      parameters:
        - $ref: '#/components/parameters/userId'
      description: Update user password by id. Available only for users with admin permissions.
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/me/:
    get:
      tags:
        - usersService
      description: Get self profile. Available only for authorized users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/me/changePassword/:
    patch:
      description: Update self password. Available only for authorized users.
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeSelfPasswordDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/forgotPassword/:
    post:
      description: Reset password. Available to unauthorized users.
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailPasswordDto'
      responses:
        '200':
          description: OK
  /company/v1/users/resetPassword/:
    post:
      description: Reset password. Available to unauthorized users.
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailPasswordTokenDto'
      responses:
        '200':
          description: OK
  /company/v1/users/search/:
    get:
      description: Search. Available only for authorized users.
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/searchEmail'
        - $ref: '#/components/parameters/searchFirstName'
        - $ref: '#/components/parameters/searchLastName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  # users end

  # auth begin
  /company/v1/auth/signIn/:
    description: Sign in user by email, password. Returns token, refreshToken
    post:
      tags:
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /company/v1/auth/confirmEmail/:
    description: Confirm email user. Returns token, refreshToken
    post:
      tags:
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /company/v1/auth/refreshToken/:
    description: refreshToken exprired token. Returns new token
    post:
      tags:
        - authService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  # auth end

  # departments begin
  /company/v1/departments/:
    get:
      description: Get departments list. Available only for authorized users.
      tags:
        - departmentsService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
        # - $ref: '#/components/parameters/queryDepartments'
        - $ref: '#/components/parameters/filterDepartments'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create department. Available only for users with admin permissions
      tags:
        - departmentsService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentPatch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Department'
                  - type: object
                    properties:
                      roles:
                        type: array
                        items:
                          type: string
                        example: "[]"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/departments/{departmentId}/:
    parameters:
      - $ref: '#/components/parameters/departmentId'
    get:
      description: Get department by id. Available only for authorized users.
      tags:
        - departmentsService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description:
        Update department data (set head department, move users, set parent department)
        Available only for head parent department or users with admin permissions. Returns updated department data
      tags:
        - departmentsService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentPatch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description:
        Delete department. Available only for users with admin permissions.
      tags:
        - departmentsService
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/departments/{departmentId}/updateRoles/:
    patch:
      description: Update department roles by id. Available only for users with admin permissions. Returns department data with new roles
      tags:
        - departmentsService
      parameters:
        - $ref: '#/components/parameters/departmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRolesDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  # departments end

  # roles begin
  /company/v1/permissions/:
    get:
      description: Get permissions list. Only available to authorized users with the owner or administrator role.
      tags:
        - rolesService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/roles/:
    get:
      description: Get role list. Only available to authorized users with the owner or administrator role.
      tags:
        - rolesService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoleList'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create role. Only available to authorized users with the owner or administrator role.
      tags:
        - rolesService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleStore'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NewRoleList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/roles/{roleId}/:
    parameters:
      - $ref: '#/components/parameters/roleId'
    get:
      description: Get role by id. Only available to authorized users with the owner or administrator role.
      tags:
        - rolesService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/RoleList'
                  - type: object
                    properties:
                      permissions:
                        $ref: '#/components/schemas/PermissionsAction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description:
        Update role data. Only available to authorized users with the owner or administrator role.
      tags:
        - rolesService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RoleStore'
                - type: object
                  properties:
                    usersIds:
                      type: string
                      example:
                        - "1"
                        - "2"
                    departmentsIds:
                      type: string
                      example:
                        - "1"
                        - "2"

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/RoleList'
                  - type: object
                    properties:
                      permissions:
                        $ref: '#/components/schemas/PermissionsAction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description:
        Delete role. Only available to authorized users with the owner or administrator role.
      tags:
        - rolesService
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  # roles end

  # newsfeed begin
  /newsfeed/v1/posts/:
    get:
      description: Get posts list. Available only for authorized users.
      tags:
        - newsFeedService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Post'
                        - allOf:
                            - $ref: '#/components/schemas/Post'
                            - type: object
                              properties:
                                comments:
                                  example: "[]"
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create post. Available only for authorized users.
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdatePostDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Post'
                  - type: object
                    properties:
                      comments:
                        example: "[]"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /newsfeed/v1/posts/{postId}/:
    parameters:
      - $ref: '#/components/parameters/postId'
    patch:
      description: Update post. Available only for author.
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdatePostDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    delete:
      description: Delete post. Available only for author or users with admin permissions.
      tags:
        - newsFeedService
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /newsfeed/v1/posts/{postId}/comments/:
    parameters:
      - $ref: '#/components/parameters/postId'
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
      description: Get comments for post. Available only for authorized users and users who have access to the post
      tags:
        - newsFeedService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    post:
      description: Create comment for the post. Available only for authorized users and users who have access to the post
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateCommentDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /newsfeed/v1/posts/{postId}/comments/{commentId}/:
    parameters:
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/commentId'
    patch:
      description: Update comment for the post. Available only for author.
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateCommentDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    delete:
      description: Delete comment for the post. Available only for author or users with admin permissions.
      tags:
        - newsFeedService
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  # newsfeed end

  # tasks begin
  /tasks/v1/tasks/:
    get:
      description: Get available tasks list. Available only for authorized users.
      tags:
        - tasksService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
        - $ref: '#/components/parameters/field_name'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/order_by'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  meta:
                    $ref: '#/components/schemas/Meta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create task. Available only for authorized users.
      tags:
        - tasksService
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateEditTaskDto'
                - type: object
                  properties:
                    fixed:
                      type: boolean
                      default: false
                      example: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/tasks/{taskId}/:
    parameters:
      - $ref: '#/components/parameters/taskId'
    get:
      description: Get task by id. Available only for authorized users and users who have access to task.
      tags:
        - tasksService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Edit task by id. Available only for authorized users and task maker.
      tags:
        - tasksService
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateEditTaskDto'
                - type: object
                  properties:
                    archive:
                      type: boolean
                      default: false
                      example: true
                    fixed:
                      type: boolean
                      default: false
                      example: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description: Delete task by id. Available only for authorized users and task maker.
      tags:
        - tasksService
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/tasks/{taskId}/denial/:
    post:
      description: Abandoning a task. Available only for authorized users.
      tags:
        - tasksService
      parameters:
        - $ref: '#/components/parameters/taskId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDenial'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]
  /tasks/v1/tasks/{taskId}/comments/:
    parameters:
      - $ref: '#/components/parameters/taskId'
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
      description: Get comments task by id. Available only for authorized users and users who have access to task.
      tags:
        - tasksService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create comment for task. Available only for authorized users and users who have access to task.
      tags:
        - tasksService
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUpdateCommentDto'
                - type: object
                  properties:
                    denial:
                      type: boolean
                      default: false
                      example: true
                      description: When the comment is a rejection and the task is not accepted.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Comment'
                  - type: object
                    properties:
                      responsibleId:
                        type: string
                        example: 2
                      denial:
                        type: boolean
                        example: true

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/tasks/{taskId}/comments/{commentId}/:
    parameters:
      - $ref: '#/components/parameters/taskId'
      - $ref: '#/components/parameters/commentId'
    delete:
      description: Delete comment to task by id. Available only for authorized users and author comment.
      tags:
        - tasksService
      responses:
        '204':
          description: No content

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update comment for task. Available only for authorized users and author comment.
      tags:
        - tasksService
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUpdateCommentDto'
                - type: object
                  properties:
                    denial:
                      type: boolean
                      default: false
                      example: true
                      description: When the comment is a rejection and the task is not accepted.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Comment'
                  - type: object
                    properties:
                      responsibleId:
                        type: string
                        example: 2
                      denial:
                        type: boolean
                        example: true

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /tasks/v1/stages/:
    get:
      description: Get canban stages. Available only for authorized users.
      tags:
        - tasksService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CanbanStage'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create canban stage. Available only for authorized users.
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEditCanbanStageDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CanbanStage'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: 2
                      afterId:
                        type: string
                        example: 1

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/stages/{stageId}/:
    get:
      description: Get canban stage by id. Available only for authorized users.
      tags:
        - tasksService
      parameters:
        - $ref: '#/components/parameters/stageId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanbanStage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update canban stage by id. Available only for authorized users.
      tags:
        - tasksService
      parameters:
        - $ref: '#/components/parameters/stageId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEditCanbanStageDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CanbanStage'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: 2
                      afterId:
                        type: string
                        example: 1

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description: Create comment for task. Available only for authorized users.
      tags:
        - tasksService
      parameters:
        - $ref: '#/components/parameters/stageId'
      responses:
        '204':
          description: No content

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/stages/{stageId}/moveTask/:
    post:
      description: Moving a task to stage
      tags:
        - tasksService
      parameters:
        - $ref: '#/components/parameters/stageId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTaskCanbanStageDto'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /tasks/v1/tasks/{taskId}/checkList/:
    parameters:
      - $ref: '#/components/parameters/taskId'
    get:
      description: Get comments task by id. Available only for authorized users and users who have access to task.
      tags:
        - tasksService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/CheckList'
                    - type: object
                      properties:
                        checkListItemIds:
                          type: array
                          items:
                            type: string
                          example: ["2", "3"]

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create check list for task. Available only for authorized users and users who have access to task.
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUpdateCheckList'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CheckList'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/tasks/{taskId}/checkList/{checkListId}/:
    parameters:
      - $ref: '#/components/parameters/taskId'
      - $ref: '#/components/parameters/checkListId'
    patch:
      description: Update check list for task. Available only for authorized users.
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUpdateCheckList'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CreateUpdateCheckList'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description: Delete check list to task by id. Available only for authorized users.
      tags:
        - tasksService
      responses:
        '204':
          description: No content

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/checkList/{checkListId}/:
    parameters:
      - $ref: '#/components/parameters/checkListId'
    get:
      description: Get items check list by id. Available only for authorized users.
      tags:
        - tasksService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        id:
                          type: string
                          description: Check list item id
                          example: 1
                    - $ref: '#/components/schemas/CheckListItem'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create item check list for task. Available only for authorized users.
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CheckListItem'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        description: Check list item id
                        example: 1
                  - $ref: '#/components/schemas/CheckListItem'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/checkList/{checkListId}/{checkListItemId}:
    parameters:
      - $ref: '#/components/parameters/checkListId'
      - $ref: '#/components/parameters/checkListItemId'
    delete:
      description: Delete item to check list by id. Available only for authorized users.
      tags:
        - tasksService
      responses:
        '204':
          description: No content

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update check list for task. Available only for authorized users.
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CheckListItem'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        description: Check list item id
                        example: 1
                  - $ref: '#/components/schemas/CheckListItem'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /tasks/v1/tasks/massEdit/complete/:
    post:
      description: Bulk editing tasks
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MassEditIds'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/tasks/massEdit/archive/:
    post:
      description: Bulk editing tasks
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MassEditIds'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /tasks/v1/tasks/massEdit/delete/:
    post:
      description: Bulk editing tasks
      tags:
        - tasksService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MassEditIds'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  # tasks end

  # files begin

  /files/v1/files:
    get:
      description: Lists the file info
      tags:
        - filesService
      parameters:
        - $ref: '#/components/parameters/entityType'
        - $ref: '#/components/parameters/entityId'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FileInfoDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Upload one or more files
      tags:
        - filesService
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadContainer'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FileInfoDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /files/v1/files/{id}:
    get:
      description: Shows the info about the file
      tags:
        - filesService
      parameters:
        - in: path
          name: fileId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the file to show
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfoDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update the `entity_id` for one file or a group of files
      tags:
        - filesService
      parameters:
        - in: path
          name: fileId
          schema:
            oneOf:
              - type: integer
                format: int64
              - type: string
                format: uuid
          required: true
          description: Numeric ID of the file to update or the UUID of the upload group
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FileInfoDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description: Removes the uploaded file and info about it
      tags:
        - filesService
      parameters:
        - in: path
          name: fileId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the file to remove
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  # files end

  # comments begin

  /comments/v1/comments/:
    get:
      description: >
        Lists the comments related to some entity.
        `nextId` and `prevId` fields in response help to do pagination.
        For more information see the description of `nextId` and `prevId` fields in the response.
      tags:
        - commentsService
      parameters:
        - allOf:
          - $ref: '#/components/parameters/entityType'
          - description: >
              Entity type name.
              If it's `comment`, record represents the child comment and `entityId` represents the parent comment ID.
              And only the child comments are being sent in this case.
              Use along with `childList` and `lastId` to paginate the child comments.
        - $ref: '#/components/parameters/entityId'
        - allOf:
          - $ref: '#/components/parameters/list'
          - description: >
              Use this to define the number of top level comments to retrieve.
              Retrieve all if missing or retrieve the rest if `nextId` is present.
          - example: 3
          - default: 3
          - required: false
        - childList:
          name: childList
          in: query
          description: >
              Use this to define the number of child comments to retrieve.
              Retrieve all if missing or retrieve the rest if `lastId` is present.
          required: false
          schema:
            type: integer
            format: int32
          example: 2
          default: 2
        - nextId:
          name: nextId
          in: query
          description: >
              The top level comments are being paginated starting from the last page but in the ascending order.
              This parameter used to point the topmost comment on the previous page. For example: to get the
              previous page in the sample below `nextId` must be 22.

              * comment-22

              * comment-23

              * comment-24


              and the entire query should look like the following:


              ```
              ?entityType=post&entityId=123&list=3&childList=2&nextId=22
              ```


              This means: to get the previous 3 comments of the entity `post-123` along with the possible
              child comments (no more then 2 child comments per parent) relating to the `comment-22`
          required: false
          schema:
            type: integer
            format: int64
        - lastId:
          name: lastId
          in: query
          description: >
            This parameter used to point the bottom child comment on the previous page. For example: to get the
            next page if the child comments in the sample below, `lastId` must be 27, `entityType` must be "comment"
            and `entityId` must be 25.

              * comment-23

              * comment-24

              * comment-25

              * child-comment-26-of-parent-25

              * child-comment-27-of-parent-25


              and the entire query should look like the following:



              ```
              ?entityType=post&entityId=123&childList=2&entityType=comment&entityId=25&lastId=27
              ```


              This means: to get the next 2 child comments of parent `comment-25` of the entity `post-123` relating to the `child-comment-27`
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/CommentServiceDto'
                        - $ref: '#/components/schemas/CommentExtrasServiceDto'
                        - type: object
                          properties:
                            nextId:
                              type: integer
                              format: int64
                              example: 3
                              description: If NULL, this is the last comment if the (sub)thread
                            prevId:
                              type: integer
                              format: int64
                              example: 1
                              description: If NULL, this is the first comment if the (sub)thread
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Creates new comment
      tags:
        - commentsService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentServiceDto'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentServiceDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /comments/v1/comments/{id}:
    get:
      description: Shows the comment info
      tags:
        - commentsService
      parameters:
        - in: path
          name: commentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the comment to show
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentServiceDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Updates the comment
      tags:
        - commentsService
      parameters:
        - in: path
          name: commentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the comment to show
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentServiceDto'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentServiceDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description: Removes the comment
      tags:
        - commentsService
      parameters:
        - in: path
          name: commentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the comment to delete
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  # comments end

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    Forbidden:
      description: Forbidden

  parameters:
    userId:
      name: userId
      in: path
      description: User id
      required: true
      schema:
        type: string
    departmentId:
      name: departmentId
      in: path
      description: Department id
      required: true
      schema:
        type: string
    roleId:
      name: roleId
      in: path
      description: Role id
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: current page
      required: false
      schema:
        type: integer
        default: 1
      example: 1
    searchEmail:
      name: email
      in: query
      required: false
      schema:
        type: string
      example: rar.stas@gmail.com
    searchFirstName:
      name: firstName
      in: query
      required: false
      schema:
        type: string
      example: Stas
    searchLastName:
      name: LastName
      in: query
      required: false
      schema:
        type: string
      example: Raranetskyi
    list:
      name: list
      in: query
      description: how many items should be per page
      required: false
      schema:
        type: number
        default: 20
      example: 10
    query:
      name: query
      in: query
      description: search query
      required: false
      schema:
        type: string
        default: ""
      example: "some query string"
    filter:
      name: filter
      in: query
      description: Fields, corresponding to the available list of entity.
      required: false
      style: deepObject
      schema:
        type: object
    filterUsers:
      allOf:
        - $ref: '#/components/parameters/filter'
        - type: object
          description: Fields, corresponding to the available list of fields user.
          example:
            email: rar.stas@gmail.com
            firstName: Stas
            lastName: Raranetskyi
            phone: "+3801234567"
            position: CTO
            active: true
            departmentsIds: ["1111", "2222"]
            roles:
              - OWNER
              - ADMIN
    queryUsers:
      allOf:
        - $ref: '#/components/parameters/query'
        - type: string
          description: Search by email, firstName, lastName
          example: rar.stas@gmail.com
    filterDepartments:
      allOf:
        - $ref: '#/components/parameters/filter'
        - type: object
          description: Fields, corresponding to the available list of fields department.
          example:
            name: "Frontend department"
            headId: "1111"
            parentDepartmentId: "1111"
            usersIds: ["1111", "2222", "3333"]
    queryDepartments:
      allOf:
        - $ref: '#/components/parameters/query'
        - type: string
          description: Search by name department
          example: Frontend department
    postId:
      name: postId
      in: path
      description: Post id
      required: true
      schema:
        type: string
    commentId:
      name: commentId
      in: path
      description: Comment id
      required: true
      schema:
        type: string
    taskId:
      name: taskId
      in: path
      description: Task id
      required: true
      schema:
        type: string
    stageId:
      name: stageId
      in: path
      description: Stage id
      required: true
      schema:
        type: string
    order_by:
      name: order_by
      in: query
      description: sorting direction
      required: false
      schema:
        type: string
        default: desc
      example: order_by=asc
    field_name:
      name: field_name
      in: query
      description: the field we are looking for
      required: false
      schema:
        type: string
      example: priority=Low
    sort_by:
      name: sort_by
      in: query
      description: the field by which to sort
      required: false
      schema:
        type: string
      example: sort_by=deadline
    checkListId:
      name: checkListId
      in: path
      description: Check List id
      required: true
      schema:
        type: string
    checkListItemId:
      name: checkListItemId
      in: path
      description: Check List item id
      required: true
      schema:
        type: string
    entityType:
      in: query
      name: entityType
      schema:
        $ref: '#/components/schemas/EntityTypes'
      required: true
      description: Entity type name
    entityId:
      in: query
      name: entityId
      schema:
        type: integer
        format: int64
      required: true
      description: Entity ID

  schemas:
    # common begin
    Meta:
      type: object
      properties:
        total:
          type: number
          example: 100
        page:
          type: number
          example: 1
        list:
          type: number
          example: 10

    Roles:
      type: array
      items:
        type: string
      example:
        - OWNER
        - Employee
        - ADMIN
    Email:
      type: string
      example: 'rar.stas@gmail.com'
    Phone:
      type: array
      items:
        properties:
          id:
            type: string
            example: '01gdnpddf5xgzxqvcn4x83mc2s'
          type:
            type: string
            enum: [WORK, MOBILE, HOME]
            example: WORK
          value:
            type: string
            example: '+380123456789'

    Date:
      type: number
      description: timestamp in seconds
      default: 0
      example: 1654180120
    Files:
      type: array
      items:
        type: string
      example:
        - path/to/image.jpg
        - path/to/image.png
    # common end

    # users begin
    User:
      type: object
      properties:
        id:
          type: string
          example: 1
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        position:
          type: string
          example: CTO
        specialization:
          type: string
          example: Specialist
        country:
          type: string
          example: Ukraine
        city:
          type: string
          example: Kiyv
        avatar:
          type: string
          example: /storage/avatars/c4ca423/avatar.jpeg
        aboutMyself:
          type: string
          example: about me
        phone:
          $ref: '#/components/schemas/Phone'
        active:
          type: boolean
        birthday:
          $ref: '#/components/schemas/Date'
        showBirthYear:
          type: boolean
          default: false
          example: true
        roles:
          $ref: '#/components/schemas/Roles'
        departmentsIds:
          type: array
          items:
            type: string
          example:
            - '1'
            - '2'
        socialMedia:
          $ref: '#/components/schemas/SocialMedia'

    UpdateUserDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        specialization:
          type: string
          example: Specialist
        country:
          type: string
          example: Ukraine
        city:
          type: string
          example: Kiyv
        avatar:
          type: string
          example: /storage/avatars/c4ca423/avatar.jpeg
        aboutMyself:
          type: string
          example: about me
        phone:
          $ref: '#/components/schemas/Phone'
        birthday:
          $ref: '#/components/schemas/Date'
        showBirthYear:
          type: boolean
          default: false
          example: true
        departmentsIds:
          type: array
          items:
            type: string
          example:
            - '1'
            - '2'
        socialMedia:
          $ref: '#/components/schemas/SocialMedia'
    UpdateRolesDto:
      allOf:
        - $ref: '#/components/schemas/Roles'
    UpdateUserPosition:
      type: object
      properties:
        position:
          type: string
      example:
        position: new position
    # users begin

    # auth
    SocialMedia:
      type: array
      items:
        properties:
          id:
            type: string
            example: '01gdnpddf5xgzxqvcn4x83bn2s'
          name:
            type: string
            example: facebook
          link:
            type: string
            example: https://www.facebook.com
    Token:
      type: object
      properties:
        expireInSeconds:
          type: number
          example: 720
        jwt:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzEyMzEyMyIsImZpcnN0TmFtZSI6IlN0YXMiLCJsYXN0TmFtZSI6IlJhcmFuZXRza3lpIiwiZW1haWwiOiJyYXIuc3Rhc0BnbWFpbC5jb20iLCJyb2xlcyI6WyJVU0VSIiwiQURNSU4iLCJPV05FUiJdfQ.au16u5LHJqdvhiPrpXDhN4NZn8Cae09I6BEmed7mt8w
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzEyMzEyMyIsImZpcnN0TmFtZSI6IlN0YXMiLCJsYXN0TmFtZSI6IlJhcmFuZXRza3lpIiwiZW1haWwiOiJyYXIuc3Rhc0BnbWFpbC5jb20iLCJyb2xlcyI6WyJVU0VSIiwiQURNSU4iLCJPV05FUiJdfQ.au16u5LHJqdvhiPrpXDhN4NZn8Cae09I6BEmed7mt8w
    SignUpDto:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
      example:
        email: "example@gmail.com"
        password: "12345678"
        firstName: Stas
        lastName: Raranetskyi
    JWT:
      type: object
      properties:
        id:
          type: string
          example: 1
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        workspaceId:
          type: string
          example: 123123
        roles:
          $ref: '#/components/schemas/Roles'
        departmentsIds:
          type: array
          items:
            type: string
          example:
            - 1
            - 2
          description: All departments from the parent
    SignInDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 12345678
    ConfirmEmailDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        token:
          type: string
          example: r6pvb5pllte
    ChangePasswordDto:
      type: object
      properties:
        password:
          type: string
          example: 12345678
    ChangeSelfPasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: 12345678
        newPassword:
          type: string
          example: 12345678
    EmailPasswordDto:
      type: object
      properties:
        email:
          type: string
          example: example@gmail.com
    EmailPasswordTokenDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 12345678
        token:
          type: string
          example: r6pvb5pllte
    # auth end

    # Departments begin
    Department:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Frontend department
        headId:
          type: string
          example: 1
        parentDepartmentId:
          type: string
          default: null
          example: 1
        usersIds:
          type: string
          example:
            - '1'
            - '2'
        roles:
          $ref: '#/components/schemas/Roles'
    DepartmentPatch:
      type: object
      properties:
        name:
          type: string
          example: Frontend department
        headId:
          type: string
          example: 1
        description:
          type: string
          example: example
        parentDepartmentId:
          type: string
          default: ""
          example: 1
        usersIds:
          type: string
          example:
            - '1'
            - '2'
    # Departments end

    # news feed begin
    Post:
      type: object
      properties:
        id:
          type: string
          example: 1
        title:
          type: string
          example: Title post
        # subject:
        #   type: string
        #   example: Subject post
        message:
          type: string
          example: Message post
        authorId:
          type: string
          example: 1
        files:
          $ref: '#/components/schemas/Files'
        date:
          $ref: '#/components/schemas/Date'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    RecipientsPost:
      type: object
      properties:
        exclude:
          type: object
          description: A field by which you can exclude the viewing of a post for users and / or departments
          properties:
            departmentsIds:
              type: array
              items:
                type: string
              example:
                - "1"
                - "2"
              examples:
                arrayDepartmentsIds:
                  - "1"
                  - "2"
                empty: []
            usersIds:
              type: array
              items:
                type: string
              example:
                - "1"
                - "2"
              examples:
                arrayUsersIds:
                  - "1"
                  - "2"
                empty: []
        include:
          type: object
          description: A field by which you can include the viewing of a post for users and / or departments
          properties:
            departmentsIds:
              type: array
              items:
                type: string
              example:
                - "3"
                - "4"
              examples:
                arrayDepartmentsIds:
                  - "1"
                  - "2"
                empty: []
            usersIds:
              type: array
              items:
                type: string
              example:
                - "3"
                - "4"
              examples:
                arrayUsersIds:
                  - "1"
                  - "2"
                empty: []
    CreateUpdatePostDto:
      type: object
      properties:
        title:
          type: string
          example: Title post
        message:
          type: string
          example: Message post
        files:
          type: array
          items:
            type: string
            format: binary
        recipients:
          $ref: '#/components/schemas/RecipientsPost'
    Comment:
      type: object
      properties:
        id:
          type: string
          example: 1
        files:
          $ref: '#/components/schemas/Files'
        message:
          type: string
          example: Message comment
        authorId:
          type: string
          example: 1
        date:
          $ref: '#/components/schemas/Date'
    CreateUpdateCommentDto:
      type: object
      properties:
        message:
          type: string
          example: Message post
        files:
          type: array
          items:
            type: string
            format: binary
    # news feed end

    # tasks begin
    Task:
      type: object
      properties:
        title:
          type: string
          example: Describe swagger api for tasksService
        deadline:
          $ref: '#/components/schemas/Date'
        closedDate:
          $ref: '#/components/schemas/Date'
        createdBy:
          type: string
          example: 1
        closedBy:
          type: string
          example: 1
        createdDate:
          $ref: '#/components/schemas/Date'
        responsibleId:
          description: ID of responsible person
          type: string
          example: 1
        accomplicesIds:
          type: array
          items:
            type: string
          example: ["2", "3"]
        auditorsIds:
          type: array
          items:
            type: string
          example: ["4", "5"]
        body:
          type: string
          example: <b>need use swagger-ui@4.x</b>
        status:
          $ref: '#/components/schemas/TaskStatus'
        kanbanStageId:
          type: string
          example: 2
        priority:
          type: string
          enum:
            - Low
            - Average
            - High
        acceptResult:
          type: boolean
          default: false
          example: true
        requiredResult:
          type: boolean
          default: false
          example: true
        resultCommentId:
          type: string
          example: 1
        fixed:
          type: boolean
          default: false
          example: true
        archive:
          type: boolean
          default: false
          example: false
        files:
          $ref: '#/components/schemas/Files'

    CreateEditTaskDto:
      type: object
      properties:
        title:
          type: string
          example: Describe swagger api for tasksService
        deadline:
          $ref: '#/components/schemas/Date'
        responsibleId:
          description: ID of responsible person
          type: string
          example: 1
        accomplicesIds:
          type: array
          items:
            type: string
          example: ["2", "3"]
        auditorsIds:
          type: array
          items:
            type: string
          example: ["4", "5"]
        body:
          type: string
          example: <b>need use swagger-ui@4.x</b>
        priority:
          type: string
          enum:
            - LOW
            - AVERAGE
            - HIGH
        files:
          type: array
          items:
            type: string
            format: binary

    TaskStatus:
      type: string
      enum:
        - TO_DO
        - IN_PROGRESS
        - READY_FOR_REVIEW
        - DONE
        - BLOCKED

    CanbanStage:
      type: object
      properties:
        id:
          type: string
          example: 1
        title:
          type: string
          example: To do
        color:
          type: string
          example: "#ff0000"
        afterId:
          type: string
          description: The ID of the stage to add after.
          example: 0

    CreateEditCanbanStageDto:
      type: object
      properties:
        title:
          type: string
          example: In progress
        color:
          type: string
          example: "#ff0000"
        afterId:
          type: string
          description: The ID of the stage to add after.
          example: 1
    MoveTaskCanbanStageDto:
      type: object
      properties:
        id:
          type: string
          description: Task id
          example: 1

    CreateDenial:
      type: object
      properties:
        reason:
          type: string
          example: No time

    CreateUpdateCheckList:
      type: object
      properties:
        title:
          type: string
          example: New check list

    CheckList:
      type: object
      properties:
        id:
          type: string
          description: Check list id
          example: 1
        title:
          type: string
          example: New check list

    CheckListItem:
      type: object
      properties:
        title:
          type: string
          example: First item
        responsibleId:
          description: ID of responsible person
          type: string
          example: 1
        deadline:
          $ref: '#/components/schemas/Date'

    MassEditIds:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          example: ["1", "2"]

    # tasks end

    # files begin

    EntityTypes:
      type: string
      enum:
        - comment
        - post
        - task

    UploadContainer:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
            format: binary
        entityType:
          $ref: '#/components/schemas/EntityTypes'
        entityId:
          type: integer
          format: int64
      required:
        - files
        - entityType

    FileInfoDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        entityType:
          $ref: '#/components/schemas/EntityTypes'
          example: 'post'
        entityId:
          type: integer
          format: int64
          example: 1
        uploadId:
          type: string
          format: uuid
          example: '369c4620-adee-4526-a0d8-a1db20bcf5b2'
        originalFilename:
          type: string
          example: sample.jpg
        lastModified:
          type: integer
          format: int64
          example: 1664629542
        size:
          type: integer
          format: int64
          example: 123456
        url:
          type: string
          example: 'https://aws.s3.amazonaws.com/my-bucket/example.jpg'

    # files end

    # roles begin
    NewRoleList:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: ADMIN
        permissions:
          $ref: '#/components/schemas/PermissionsAction'

    PermissionsAction:
      type: object
      properties:
        create:
          type: string
          example:
            - crm.lead.create.mine
            - crm.lead.create.allowed
            - crm.lead.create.department
        view:
          type: string
          example:
            - crm.lead.view.mine
            - crm.lead.view.allowed
            - crm.lead.view.department
        edit:
          type: string
          example:
            - crm.lead.edit.mine
            - crm.lead.edit.allowed
            - crm.lead.edit.department
        delete:
          type: string
          example:
            - crm.lead.delete.mine
            - crm.lead.delete.allowed
            - crm.lead.delete.department
        export:
          type: string
          example:
            - crm.lead.export.mine
            - crm.lead.export.allowed
            - crm.lead.export.department

    RoleList:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: ADMIN
        userlist:
          $ref: '#/components/schemas/Userlist'
        departmentlist:
          $ref: '#/components/schemas/Departmentlist'

    Departmentlist:
      type: array
      items:
        $ref: '#/components/schemas/DepartmentForRole'

    DepartmentForRole:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Employee
        dateUpdate:
          $ref: '#/components/schemas/Date'

    Userlist:
      type: array
      items:
        $ref: '#/components/schemas/UserForRole'

    UserForRole:
      type: object
      properties:
        id:
          type: string
          example: 1
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        avatar:
          type: string
          example: path to avatar
        dateUpdate:
          $ref: '#/components/schemas/Date'

    RoleStore:
      type: object
      properties:
        name:
          type: string
          example: ADMIN
        permissions:
          $ref: '#/components/schemas/PermissionsStore'

    PermissionsStore:
      type: array
      items:
        type: string
      example:
        - crm.lead.edit.mine
        - crm.lead.delete.allowed
        - crm.lead.edit.department

    PermissionsList:
      type: object
      properties:
        create:
          type: string
          example:
            - crm.lead.create.allowed
            - crm.contact.create.allowed
            - crm.company.create.allowed
            - crm.deal.create.allowed
            - crm.invoice.create.allowed
            - crm.product.create.allowed
            - crm.activity.create.allowed
            - hrm.hiring.create.allowed
            - hrm.candidate.create.allowed
            - hrm.department.create.allowed
            - hrm.employee.create.allowed
            - tasks.task.create.allowed
            - tasks.board.create.allowed
            - tasks.template.create.allowed
        view:
          type: string
          example:
            - crm.lead.view.allowed
            - crm.lead.view.department
            - crm.lead.view.mine
            - crm.contact.view.allowed
            - crm.contact.view.department
            - crm.contact.view.mine
            - crm.company.view.allowed
            - crm.company.view.mine
            - crm.deal.view.allowed
            - crm.deal.view.mine
            - crm.invoice.view.allowed
            - crm.invoice.view.mine
            - crm.product.view.allowed
            - crm.activity.view.allowed
            - crm.activity.view.mine
            - hrm.hiring.view.allowed
            - hrm.candidate.view.allowed
            - hrm.department.view.allowed
            - hrm.employee.view.allowed
            - hrm.employee.view.mine
            - tasks.task.view.allowed
            - tasks.task.view.department
            - tasks.task.view.mine
            - tasks.board.view.allowed
            - tasks.board.view.department
            - tasks.template.view.allowed
            - tasks.template.view.department
        edit:
          type: string
          example:
            - crm.lead.edit.allowed
            - crm.lead.edit.department
            - crm.lead.edit.mine
            - crm.contact.edit.allowed
            - crm.contact.edit.department
            - crm.contact.edit.mine
            - crm.company.edit.allowed
            - crm.company.edit.mine
            - crm.deal.edit.allowed
            - crm.deal.edit.mine
            - crm.invoice.edit.allowed
            - crm.invoice.edit.mine
            - crm.product.edit.allowed
            - crm.activity.edit.allowed
            - crm.activity.edit.mine
            - hrm.hiring.edit.allowed
            - hrm.candidate.edit.allowed
            - hrm.department.edit.allowed
            - hrm.employee.edit.allowed
            - hrm.employee.edit.mine
            - tasks.task.edit.allowed
            - tasks.task.edit.department
            - tasks.task.edit.mine
            - tasks.board.edit.allowed
            - tasks.board.edit.mine
            - tasks.template.edit.allowed
            - tasks.template.edit.mine
            - news_feed.news.edit.allowed
        delete:
          type: string
          example:
            - crm.lead.delete.allowed
            - crm.contact.delete.allowed
            - crm.company.delete.allowed
            - crm.deal.delete.allowed
            - crm.invoice.delete.allowed
            - crm.product.delete.allowed
            - crm.activity.delete.allowed
            - crm.activity.delete.mine
            - hrm.hiring.delete.allowed
            - hrm.candidate.delete.allowed
            - hrm.department.delete.allowed
            - hrm.employee.delete.allowed
            - tasks.task.delete.allowed
            - tasks.task.delete.mine
            - tasks.board.delete.allowed
            - tasks.board.delete.mine
            - tasks.template.delete.allowed
            - tasks.template.delete.mine
            - news_feed.news.delete.allowed
        export:
          type: string
          example:
            - crm.lead.export.allowed
            - crm.contact.export.allowed
            - crm.company.export.allowed
            - crm.deal.export.allowed
            - crm.invoice.export.allowed
            - crm.product.export.allowed
            - crm.activity.export.allowed
            - hrm.hiring.export.allowed
            - hrm.candidate.export.allowed
            - hrm.department.export.allowed
            - hrm.employee.export.allowed
            - tasks.task.export.allowed
            - tasks.template.export.allowed

    # roles end

    # comments begin

    CommentServiceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        entityType:
          $ref: '#/components/schemas/EntityTypes'
          example: 'post'
        entityId:
          type: integer
          format: int64
          example: 1
        message:
          type: string
          example: Message comment
        authorId:
          type: string
          example: 1
        date:
          $ref: '#/components/schemas/Date'

    CommentExtrasServiceDto:
      type: object
      properties:
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/ReactionServiceDto'

    ReactionServiceDto:
      type: object
      properties:
        reaction:
          type: integer
          format: int64
          example: 128513
          description: Represents the UNICODE symbol such as 0x0001F601
        count:
          type: integer
          format: int32
          example: 53

    CreateCommentServiceDto:
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/EntityTypes'
          example: 'post'
        entityId:
          type: integer
          format: int64
          example: 1
        message:
          type: string
          example: Message post
      required:
        - entityType
        - entityId

    UpdateCommentServiceDto:
      type: object
      properties:
        message:
          type: string
          example: Message post

    # comments end

