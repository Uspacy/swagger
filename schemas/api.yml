openapi: '3.0.n'
info:
  title: Uspacy api
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000
tags:
  - name: usersService
  - name: authService
  - name: departmentsService
  - name: newsFeedService

paths:
  # users begin
  /company/v1/users/:
    get:
      description: Get users list. Available only for authorized users.
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
        # - $ref: '#/components/parameters/queryUsers'
        - $ref: '#/components/parameters/filterUsers'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Sign up user by firstName, lastName, email, password. Available only for users with admin permissions. Returns created user
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SignUpDto'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          position:
                            example: ''
                          phone:
                            example: ''
                          birthday:
                            example: 0
                          roles:
                            example: '["USER"]'
                          departmentsIds:
                            example: "[]"
                          socialMedia:
                            example: "[]"

          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - usersService
      description: Get user by id. Available only for authorized users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description: Update user data by id. Available only for authorized users
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/deactivate/:
    post:
      description: "Deactivate user by id. Available only for users with admin permissions. Returns user data with active: false"
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          active:
                            example: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/activate/:
    post:
      description: "Activate user by id. Available only for users with admin permissions. Returns user data with active: true"
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/updateRoles/:
    patch:
      description: Update user roles by id. Available only for users with admin permissions. Returns user data with new roles
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/UpdateRolesDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          roles:
                            allOf:
                            - type: string
                              example:
                                - ADMIN
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/updatePosition/:
    patch:
      description: Update user position by id. Available only for users with admin permissions. Returns user data with new position
      tags:
        - usersService
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/UpdateUserPosition'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          position:
                            example: new position

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/users/{userId}/changePassword/:
    patch:
      parameters:
        - $ref: '#/components/parameters/userId'
      description: Update user password by id. Available only for users with admin permissions.
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/me/:
    get:
      tags:
        - usersService
      description: Get self profile. Available only for authorized users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /company/v1/users/me/changePassword/:
    patch:
      description: Update self password. Available only for authorized users.
      tags:
        - usersService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ChangeSelfPasswordDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  # users end

  # auth begin
  /company/v1/auth/signIn/:
    description: Sign in user by email, password. Returns token, refreshToken
    post:
      tags:
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Token'
  /company/v1/auth/confirmEmail/:
    description: Confirm email user. Returns token, refreshToken
    post:
      tags:
        - authService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ConfirmEmailDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Token'
  /company/v1/auth/refreshToken/:
    description: refreshToken exprired token. Returns new token
    post:
      tags:
        - authService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Token'
  # auth end

  # departments begin
  /company/v1/departments/:
    get:
      description: Get departments list. Available only for authorized users.
      tags:
        - departmentsService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
        # - $ref: '#/components/parameters/queryDepartments'
        - $ref: '#/components/parameters/filterDepartments'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create department. Available only for users with admin permissions
      tags:
        - departmentsService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /company/v1/departments/{departmentId}:
    parameters:
      - $ref: '#/components/parameters/departmentId'
    get:
      description: Get department by id. Available only for authorized users.
      tags:
        - departmentsService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    patch:
      description:
        Update department data (set head department, move users, set parent department)
        Available only for head parent department or users with admin permissions. Returns updated department data
      tags:
        - departmentsService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/DepartmentPatch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    delete:
      description:
        Delete department. Available only for users with admin permissions.
      tags:
        - departmentsService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Department'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  # departments end

  # newsfeed begin
  /newsfeed/v1/posts/:
    get:
      description: Get posts list. Available only for authorized users.
      tags:
        - newsFeedService
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    $ref: '#/components/schemas/Meta'
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Post'
                        - allOf:
                            - $ref: '#/components/schemas/Post'
                            - type: object
                              properties:
                                comments:
                                  example: "[]"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
    post:
      description: Create post. Available only for authorized users.
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdatePostDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Post'
                      - type: object
                        properties:
                          comments:
                            example: "[]"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /newsfeed/v1/posts/{postId}/:
    parameters:
      - $ref: '#/components/parameters/postId'
    patch:
      description: Update post. Available only for author.
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdatePostDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    delete:
      description: Delete post. Available only for author or users with admin permissions.
      tags:
        - newsFeedService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /newsfeed/v1/posts/{postId}/comments/:
    parameters:
      - $ref: '#/components/parameters/postId'
    get:
      description: Get comments for post. Available only for authorized users and users who have access to the post
      tags:
        - newsFeedService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    post:
      description: Create comment for the post. Available only for authorized users and users who have access to the post
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateCommentDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /newsfeed/v1/posts/{postId}/comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/commentId'
    patch:
      description: Update comment for the post. Available only for author.
      tags:
        - newsFeedService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateCommentDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    delete:
      description: Delete comment for the post. Available only for author or users with admin permissions.
      tags:
        - newsFeedService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  # newsfeed end

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    Forbidden:
      description: Forbidden

  parameters:
    userId:
      name: userId
      in: path
      description: User id
      required: true
      schema:
        type: string
    departmentId:
      name: departmentId
      in: path
      description: Department id
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: current page
      required: false
      schema:
        type: integer
      default: 1
      example: 1
    list:
      name: list
      in: query
      description: how many items should be per page
      required: false
      schema:
        type: number
      example: 10
      default: 20
    query:
      name: query
      in: query
      description: search query
      required: false
      schema:
        type: string
      example: "some query string"
      default: ""
    filter:
      name: filter
      in: query
      description: Fields, corresponding to the available list of entity.
      required: false
      style: deepObject
      schema:
        type: object
    filterUsers:
      allOf:
        - $ref: '#/components/parameters/filter'
        - type: object
          description: Fields, corresponding to the available list of fields user.
          example:
            email: rar.stas@gmail.com
            firstName: Stas
            lastName: Raranetskyi
            phone: "+3801234567"
            position: CTO
            active: true
            departmentsIds: ["1111", "2222"]
            roles:
              - OWNER
              - ADMIN
    queryUsers:
      allOf:
        - $ref: '#/components/parameters/query'
        - type: string
          description: Search by email, firstName, lastName
          example: rar.stas@gmail.com
    filterDepartments:
      allOf:
        - $ref: '#/components/parameters/filter'
        - type: object
          description: Fields, corresponding to the available list of fields department.
          example:
            name: "Frontend department"
            headId: "1111"
            parentDepartmentId: "1111"
            usersIds: ["1111", "2222", "3333"]
    queryDepartments:
      allOf:
        - $ref: '#/components/parameters/query'
        - type: string
          description: Search by name department
          example: Frontend department
    postId:
      name: postId
      in: path
      description: Post id
      required: true
      schema:
        type: string
    commentId:
      name: commentId
      in: path
      description: Comment id
      required: true
      schema:
        type: string
  schemas:
    # common begin
    Meta:
      type: object
      properties:
        total:
          type: number
          example: 100
        page:
          type: number
          example: 1
        list:
          type: number
          example: 10

    Roles:
      type: array
      items:
        type: string
      example:
        - OWNER
        - USER
    Email:
      type: string
      example: 'rar.stas@gmail.com'
    Phone:
      type: string
      example: '+380123456789'
    Date:
      type: number
      description: timestamp in seconds
      default: 0
      example: 1654180120
    Files:
      type: array
      items:
        type: string
      example:
        - path/to/image.jpg
        - path/to/image.png
    # common end

    # users begin
    User:
      type: object
      properties:
        id:
          type: string
          example: 1
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        position:
          type: string
          example: CTO
        phone:
          $ref: '#/components/schemas/Phone'
        active:
          type: boolean
        birthday:
          $ref: '#/components/schemas/Date'
        showBirthYear:
          type: boolean
          default: false
          example: true
        roles:
          $ref: '#/components/schemas/Roles'
        departmentsIds:
          type: array
          items:
            type: string
          example:
            - '1'
            - '2'
        socialMedia:
          $ref: '#/components/schemas/SocialMedia'

    UpdateUserDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        phone:
          $ref: '#/components/schemas/Phone'
        birthday:
          $ref: '#/components/schemas/Date'
        showBirthYear:
          type: boolean
          default: false
          example: true
        departmentsIds:
          type: array
          items:
            type: string
          example:
            - '1'
            - '2'
        socialMedia:
          $ref: '#/components/schemas/SocialMedia'
    UpdateRolesDto:
      allOf:
        - $ref: '#/components/schemas/Roles'
        - type: string
          example:
            - ADMIN
    UpdateUserPosition:
      type: object
      properties:
        position:
          type: string
      example:
        position: new position
    # users begin

    # auth
    SocialMedia:

      type: array
      items:
        object:
        properties:
          name:
            type: string
            example: facebook
          link:
            type: string
            example: https://www.facebook.com
    Token:
      type: object
      properties:
        expireInSeconds:
          type: number
          example: 720
        jwt:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzEyMzEyMyIsImZpcnN0TmFtZSI6IlN0YXMiLCJsYXN0TmFtZSI6IlJhcmFuZXRza3lpIiwiZW1haWwiOiJyYXIuc3Rhc0BnbWFpbC5jb20iLCJyb2xlcyI6WyJVU0VSIiwiQURNSU4iLCJPV05FUiJdfQ.au16u5LHJqdvhiPrpXDhN4NZn8Cae09I6BEmed7mt8w
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzEyMzEyMyIsImZpcnN0TmFtZSI6IlN0YXMiLCJsYXN0TmFtZSI6IlJhcmFuZXRza3lpIiwiZW1haWwiOiJyYXIuc3Rhc0BnbWFpbC5jb20iLCJyb2xlcyI6WyJVU0VSIiwiQURNSU4iLCJPV05FUiJdfQ.au16u5LHJqdvhiPrpXDhN4NZn8Cae09I6BEmed7mt8w
    SignUpDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
      example:
        email:
        password: "12345678"
        firstName: Stas
        lastName: Raranetskyi
    JWT:
      type: object
      properties:
        id:
          type: string
          example: 1
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: Stas
        lastName:
          type: string
          example: Raranetskyi
        workspaceId:
          type: string
          example: 123123
        roles:
          $ref: '#/components/schemas/Roles'
        departmentsIds:
          type: array
          items:
            type: string
          example:
            - 1
            - 2
          description: All departments from the parent
    SignInDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 12345678
    ConfirmEmailDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        token:
          type: string
          example: r6pvb5pllte
    ChangePasswordDto:
      type: object
      properties:
        password:
          type: string
          password: 12345678
    ChangeSelfPasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          password: 12345678
        newPassword:
          type: string
          password: 12345678
    # auth end

    # Departments begin
    Department:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Frontend department
        headId:
          type: string
          example: 1
        parentDepartmentId:
          type: string
          nulable: true
          default: null
          example: 1
        usersIds:
          type: string
          example:
            - '1'
            - '2'
    DepartmentPatch:
      type: object
      properties:
        name:
          type: string
          example: Frontend department
        headId:
          type: string
          example: 1
        parentDepartmentId:
          type: string
          nulable: true
          default: null
          example: 1
        usersIds:
          type: string
          example:
            - '1'
            - '2'
    # Departments end

    # news feed begin
    Post:
      type: object
      properties:
        id:
          type: string
          example: 1
        title:
          type: string
          example: Title post
        # subject:
        #   type: string
        #   example: Subject post
        message:
          type: string
          example: Message post
        authorId:
          type: string
          example: 1
        files:
          $ref: '#/components/schemas/Files'
        date:
          $ref: '#/components/schemas/Date'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    RecipientsPost:
      type: object
      properties:
        exclude:
          type: object
          description: A field by which you can exclude the viewing of a post for users and / or departments
          properties:
            departmentsIds:
              type: array
              items:
                type: string
              example:
                - "1"
                - "2"
              examples:
                arrayDepartmentsIds:
                  - "1"
                  - "2"
                empty: []
            usersIds:
              type: array
              items:
                type: string
              example:
                - "1"
                - "2"
              examples:
                arrayUsersIds:
                  - "1"
                  - "2"
                empty: []
        include:
          type: object
          description: A field by which you can include the viewing of a post for users and / or departments
          properties:
            departmentsIds:
              type: array
              items:
                type: string
              example:
                - "3"
                - "4"
              examples:
                arrayDepartmentsIds:
                  - "1"
                  - "2"
                empty: []
            usersIds:
              type: array
              items:
                type: string
              example:
                - "3"
                - "4"
              examples:
                arrayUsersIds:
                  - "1"
                  - "2"
                empty: []
    CreateUpdatePostDto:
      type: object
      properties:
        title:
          type: string
          example: Title post
        message:
          type: string
          example: Message post
        files:
          type: array
          items:
            type: string
            format: binary
        recipients:
          $ref: '#/components/schemas/RecipientsPost'
          # example:
          #   exclude:
          #     departmentsIds:
          #       - "1"
          #       - "2"
          #     usersIds:
          #       - "1"
          #       - "2"
    Comment:
      type: object
      properties:
        id:
          type: string
          example: 1
        files:
          $ref: '#/components/schemas/Files'
        message:
          type: string
          example: Message comment
        authorId:
          type: string
          example: 1
        date:
          $ref: '#/components/schemas/Date'
    CreateUpdateCommentDto:
      type: object
      properties:
        message:
          type: string
          example: Message post
        files:
          type: array
          items:
            type: string
            format: binary
    # news feed end

